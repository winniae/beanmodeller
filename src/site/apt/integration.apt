 -----
 Integrating the Bean Modeller into your project
 -----
 -----
 -----

What does the Bean Modeller provide
~~~~~~~~~~~~~~~~~~~~~~~~

    The Bean Modeller creates the following artifacts from your source code:

    * The doctypes.xml.

    * The implementation for the content access.

    * The configuration of the content bean factory: contentbeans.xml

Configuring the Bean Modeller
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The Bean Modeller is best configured in the plugin management of your project. There are two important settings that
  define it's behaviour:

  * The dependencies are the maven modules in which the content beans are searched.

  * The <<contentBeanPackage>> defines the topmost package in which your beans are searched.

  These settings are valid and reused for all the executions of the Bean Modeller and therefore it is good to put it
  in the plugin management.
  You can of course define that everywhere you use the Bean Modeller plugin, but that would be a bit cumbersome.

+------------------------------------------------------------------------+
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>com.coremedia.maven</groupId>
          <artifactId>beanmodeller-maven-plugin</artifactId>
          <version>1.0-SNAPSHOT</version>
          <configuration>
            <contentBeanPackage>com.dtag.relaunchcom2011.develop.abstractbeans</contentBeanPackage>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>${project.groupId}</groupId>
              <artifactId>contentbeans</artifactId>
              <version>${project.version}</version>
            </dependency>
          </dependencies>
        </plugin>
        ....
+------------------------------------------------------------------------+


Configuring the Bean Modeller for DocType generation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  This section will describe you how to use Bean modeller's doctype generation capabilities in your project.
  Before you can use it you have to configure plugin in your project's build configurations as shown in section below.
  As we are generating doctype XML beanmodeller needs a dependency to a module that holds abstract content beans.
  In our case abstract content beans are defined in a "contentbeans" module.

+------------------------------------------------------------------------+
  <build>
      <!-- configuration of beanmodeller plugin -->
      <plugin>
        <groupId>com.coremedia.maven</groupId>
        <artifactId>beanmodeller-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-doctypes</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>generate-doctypes</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
+------------------------------------------------------------------------+

  You can of course define that everywhere you use the Bean Modeller plugin, but that would be a bit cumbersome.

  Parameter descriptions, which are necessary for doctype generation:
  
  <<contentBeanPackage>>    - tells bean modeller where to search for the content beans

  <<docTypeTargetFileName>> - how bean modeller should name the doctype XML

  <<docTypeTargetPath>>     - tells bean modeller where to put doctype XML

  <<xsdTargetPath>>         - tells the bean modeller where to put the custom xsd for the custom xml properties


Generating Content Access Implementations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  In your content beans you only provided abstract methods accessing the content. But you did not implement them
  (since it is so boring). But somebody has to implement it. The Bean Modeller does it for you.
  All you have to do is ask the Bean Modeller kindly to do it. The implementation is best kept in a module for just
  the implementation and the configuration. You cannot put it directly into the module containing the content beans.
  Because then you have to be able to build the module in order to use the Bean Modeller to build the
  model - won't work.
  In the external module you simply say:

+------------------------------------------------------------------------+
 <build>
    <plugins>
      <plugin>
        <groupId>com.coremedia.maven</groupId>
        <artifactId>beanmodeller-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-content-beans</id>
            <goals>
              <goal>generate-contentbeans</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <contentBeanPackage>where.are.your.beans</contentBeanPackage>
              <accessorizerBeansPackage>where.should.the.implementations.go</accessorizerBeansPackage>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
+------------------------------------------------------------------------+

*Mandatory Configuration

  The parameter <<contentBeanPackage>> specifies the package in which the content beans can be found. This ca of course
  be the parent package.

  The parameter <<targetPackage>> defines the package name of the generated beans. It is not very important to pick a
  specific package. All generated classes have the suffix 'Accesorizor' to distinguish them enough from the original
  beans.

*Optional Configuration

  There is also a parameter <<targetPath>> which controls where the generated sources should go. By default it is
  'target/generated-resource/beanmodeller'. If you want to change it free to do so. The bean modeller currently
  always overwrites it - so it is not really useful to use the 'src' folder.

  The parameter <<targetSpringConfigFileName>> controls the filename and directory for <<contentbeans.xml>>. The default
  value is 'target/webapp/WEB-INF/spring/contentbeans.xml'.