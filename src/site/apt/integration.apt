 -----
 Integrating the Bean Modeller into your project
 -----
 -----
 -----

What does the Bean Modeller provide
~~~~~~~~~~~~~~~~~~~~~~~~

    The Bean Modeller creates the following artefacts from your source code:

    * The doctypes.xml.

    * The implementation for the content access.

    * The configuration of the content bean factory.

Configuring the Bean Modeller
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The Bean Modeller does a lot of useful stuff for you. But you have to help a bit.
  For it's generation Task it has to look for content beans somewhere. And most probably this is consistent for the
  whole project. Therefore you have to add the module containing the content beans as dependencies in the plugin
  management.

+------------------------------------------------------------------------+
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>com.coremedia.maven</groupId>
          <artifactId>beanmodeller-maven-plugin</artifactId>
          <version>1.0-SNAPSHOT</version>
          <dependencies>
            <dependency>
              <groupId>${project.groupId}</groupId>
              <artifactId>contentbeans</artifactId>
              <version>${project.version}</version>
            </dependency>
          </dependencies>
        </plugin>
        ....
+------------------------------------------------------------------------+

  You can of course define that everywhere you use the Bean Modeller plugin, but that would be a bit cumbersome.

Generating Content Access Implementations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  In your content beans you only provided abstract methods accessing the content. But you did not implement them
  (since it is so boring). But somebody has to implement it. The Bean Modeller does it for you.
  All you have to do is ask the Bean Modeller kindly to do it. The implementation is best kept in a module for just
  the implementation and the configuration. You cannot put it directly into the module containing the content beans.
  Because then you have to be able to build the module in order to use the Bean Modeller to build the
  model - won't work.
  In the external module you simply say:

+------------------------------------------------------------------------+
 <build>
    <plugins>
      <plugin>
        <groupId>com.coremedia.maven</groupId>
        <artifactId>beanmodeller-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-content-beans</id>
            <goals>
              <goal>generate-contentbeans</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <beanPackage>where.are.your.beans</beanPackage>
              <targetPackage>where.should.the.implementations.go</targetPackage>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
+------------------------------------------------------------------------+

  The parameter <<beanPackage>> specifies the package in which the content beans can be found. This ca of course
  be the parent package.

  The parameter <<targetPackage>> defines the package name of the generated beans. It is not very important to pick a
  specific package. All generated classes have the suffix 'Accesorizor' to distinguish them enough from the original
  beans.

  There is also a parameter <<targetPath>> which controls where the generated sources should go. By default it is
  'target/generated-resource/beanmodeller'. If you want to change it free to do so. The bean modeller currently
  always overwrites it - so it is not really useful to use the 'src' folder.