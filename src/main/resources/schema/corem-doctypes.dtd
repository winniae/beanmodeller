<!--

     corem-doctypes.dtd 1.12 05/06/07

     Copyright (c) 1998-2005 CoreMedia AG, Hamburg. All rights reserved.

     This document type definition defines the structure
     of documents describing document types for the CoreMeda
     Content Application Platform.

-->

<!--
     DocumentTypeModel
     =================

     The top level element is the DocumentTypeModel element which is a container
     for all the document types and XML Grammars stored inside the system.
     The element has one attribute:

     Utf8Weight: The value must be between 100 and 300 and, when divided by 100,
                 defines the ratio between character and byte length for all
                 string properties in the type schema where the attribute
                 Utf8Length is not explicitly set.
                 The default value for the Utf8Weight attribute, if omitted, is 300.
-->

<!ELEMENT DocumentTypeModel (DocType | XmlGrammar | XmlSchema | ImportDocType | ImportGrammar)+>
<!ATTLIST DocumentTypeModel
          Utf8Weight         NMTOKEN  #IMPLIED
          Name               NMTOKEN  #IMPLIED
>

<!--
     XmlGrammar
     ==========

     Each XML grammar defines a CAP-internal symbolic name and refers to a XML grammar
     by a SystemId and/or an optional PublicId.

     Additionally, the name of the element to be used as the root element for the
     XML grammar is specified, since XML DTDs provide no mechanism for this.
     The SystemId should contain a path that is either absolute or relative
     to $COREM_HOME which specifies the location of the XML grammar in the CAP
     server's file system. The SystemId can also be a URL from where the CAP server
     loads the XML grammar on startup.

     Grammars are referenced in XmlProperty declarations.
     A XmlGrammar Element has the following Attributes:

     Name: The name of the XML grammar.

     Root: The name of the element to be used as the root element.

     Parent: CoreMedia CAP has an inheritance concept for XML grammars. In the
             XmlGrammar element, there is an optional attribute, Parent. If
	     this attribute is set to the name of another XML grammar, the XML
	     grammar may be used when overriding a property with the other XML
	     grammar.
-->

<!ELEMENT XmlGrammar EMPTY>
<!ATTLIST XmlGrammar
	  Name      ID       #REQUIRED
          Root      NMTOKEN  #REQUIRED
          PublicId  CDATA    #IMPLIED
          SystemId  CDATA    #REQUIRED
          Parent    CDATA    #IMPLIED>

<!--
     XmlSchema
     ==========

     Each XML schema defines a CAP-internal symbolic name and refers to a XML schema
     by a location defined in SchemaLocation.

     The SchemaLocation should contain a path that is either absolute or relative
     to $COREM_HOME which specifies the location of the XML schema in the CAP
     server's file system.

     Schemas are referenced in XmlProperty declarations.
     An XmlSchema Element has the following Attributes:

     Name: The name of the XML schema.

     SchemaLocation: reference(s) to XML Schemata separated by white spaces. 
     		     The namespace is taken from the xsd file(s).

     Language: e.g. http://www.w3.org/2001/XMLSchema

     Parent: CoreMedia CAP has an inheritance concept for XML schemas. In the
             XmlSchema element, there is an optional attribute, Parent. If
	     this attribute is set to the name of another XML schema, the XML
	     schema may be used when overriding a property with the other XML
	     schema.
-->

<!ELEMENT XmlSchema EMPTY>
<!ATTLIST XmlSchema
	  Name      			ID     #REQUIRED
	  SchemaLocation 		CDATA  #IMPLIED
	  Language  			CDATA  #REQUIRED
	  Parent    			CDATA  #IMPLIED>

<!--
     DocType
     =======

     Each document type needs a specification of all fields that the corresponding
     documents have. The properties, presented as fields, vary, e.g. simple strings
     (such as for the author), XML for the textual content or binary data for graphics.
     This is determined in the document type with appropriate field types.
     A document type may contain a maximum of 91 field types. All field types have
     the attribute Name, defining the name by which the field can be referenced in a document.

     A DocType Element has the following Attributes:

     Name: The Name of the document type which must not be one of: BlobCodeTable, BlobData,
           Blobs, ChangeLog, CmGroups, CmLicenses, CmRules, CmUserGroup, CmUsers, FolderIndex,
	   LinkLists, MaxIds, QueryIdTable, ReplicatorIdTable, Resources, SgmlData, SgmlGrammar,
	   SgmlText, System, Texts, TrashIdTable, * or +.
           Furthermore, names corresponding to the name scheme [doctype][digit][digit]"i"[char]*,
           where [doctype] stands for an already defined document type name, [digit] for
           a number and "i[char]*" for a word which begins with the letter "i" are not allowed.

     Parent: CoreMedia CAP has an inheritance concept for document types. In the <DocType>
             element, there is an optional attribute, Parent. If this attribute is set to the
             name of another document type, the new document type inherits all
             fields of its parent document.

     Abstract: In addition, a document type can be defined as abstract. For it, the
               attribut Abstract must be set to "true" in the <DocType> element. A
	       document type is defined as concrete (not abstract) by default.

     Index: A boolean flag, which, when set to "true", determines that
            an index should be created for each int, String and Date
            property type.

     PkName: Name of the primary key constraint used during document type table creation.
             By default, this is "pk_" plus the document type's name.
     ResourceFkName: Name of the resource table foreign key constraint used during
                     document type table creation. By default, this is "fk_" plus
                     the document type's name.
     Tablespace: The name of the tablespace in which the content type table
            should be created.
     IndexTablespace: The name of the tablespace in which the indices for the 
            content type table should be created.
     IndexName: Name of the indices during document type table creation.
                By default, this is "i_" plus the document type's name.
-->

<!ELEMENT DocType ( IntProperty      |
                    StringProperty   |
                    DateProperty     |
                    BlobProperty     |
                    SgmlTextProperty |
                    XmlProperty      |
                    LinkListProperty )* >

<!ATTLIST DocType 
          Name                ID            #REQUIRED
          Parent              NMTOKEN       #IMPLIED
          Abstract            (true|false)  #IMPLIED
          Index               (true|false)  #IMPLIED
          PkName              NMTOKEN       #IMPLIED
          ResourceFkName      NMTOKEN       #IMPLIED
          Tablespace          NMTOKEN       #IMPLIED
          IndexTablespace     NMTOKEN       #IMPLIED
          IndexName           NMTOKEN       #IMPLIED
>

<!ELEMENT ImportDocType EMPTY >

<!ATTLIST ImportDocType
          Name                ID            #REQUIRED
          From                NMTOKEN       #IMPLIED
>

<!ELEMENT ImportGrammar EMPTY >

<!ATTLIST ImportGrammar
          Name                ID            #REQUIRED
          From                NMTOKEN       #IMPLIED
>

<!--
     Properties
     ==========

     Each document type needs a specification of all fields that the corresponding documents
     have. The properties, presented as fields, vary, e.g. simple strings (such as for
     the author), XML for the textual content or binary data for graphics. This is determined
     in the document type with appropriate field types. A document type may contain a maximum
     of 91 field types. All field types have the attribute Name, defining the name by which
     the field can be referenced in a document.


     Common Property Attributes
     ==========================

     Name: The name can have a maximum length of 18 characters (DateProperty field names
     only 15 characters) and must not contain umlauts or other special characters for
     database queries are case-sensitive. Two fields in a document type different only
     in upper or lower case are not allowed. Furthermore, a name's last character must
     not be an underscore, since these field names are reserved for CAP.

     Index: A boolean flag, which, when set to "true", determines that
            an index should be created for the property type.
     IndexTablespace: the name of the tablespace in which an index for the property should be created.

     Override: A boolean flag, which, when set to "true", determines that
	       the property type overrides a property type of a parent
	       document type.

	       When overriding, the type of the property type must match and it must
	       specialize the overridden property type definition.

     Comment: An attribute to place comments into. Currently not interpreted by the CAP server.
-->
<!ELEMENT IntProperty EMPTY>
<!ATTLIST IntProperty Name      NMTOKEN       #REQUIRED
                      Index     (true|false)  #IMPLIED
                      IndexTablespace     NMTOKEN       #IMPLIED
                      Override  (true|false)  #IMPLIED
                      Comment   CDATA         #IMPLIED
>

<!ELEMENT StringProperty EMPTY>
<!ATTLIST StringProperty Name        NMTOKEN       #REQUIRED
                         Index       (true|false)  #IMPLIED
                         IndexTablespace     NMTOKEN       #IMPLIED
	                 Length      NMTOKEN       #REQUIRED
                         Utf8Length  NMTOKEN       #IMPLIED
                         Override    (true|false)  #IMPLIED
                         Comment     CDATA         #IMPLIED
>
	  
<!ELEMENT DateProperty EMPTY>
<!ATTLIST DateProperty Name      NMTOKEN       #REQUIRED
                       Index     (true|false)  #IMPLIED
                       IndexTablespace     NMTOKEN       #IMPLIED
                       Override  (true|false)  #IMPLIED
                       Comment   CDATA         #IMPLIED
>


<!--
     BlobProperty
     ============

     Blob Properties store arbitrary binary data. BlobProperties must be typed using the
     MimeType attribute. The MimeType must be a valid production of Content-Type (see
     IETF RFC 1041). Types and subtypes may be undefined, ie "*/*" is a valid production.

     Example: <BlobProperty Name="Image" MimeType="image/*"/>
-->

<!ELEMENT BlobProperty EMPTY>
<!ATTLIST BlobProperty Name      NMTOKEN       #REQUIRED
                       MimeType  CDATA         #REQUIRED
                       Override  (true|false)  #IMPLIED
                       Comment   CDATA         #IMPLIED
>

<!--
     LinkLists
     =========

     LinkList properties store references to other documents in the repository. Links must
     be typed - thus the LinkType attribute is required. The attribute must contain a valid
     document type name.

     Example: <LinkListProperty Name="Images" LinkType="Image"/>
-->

<!ELEMENT LinkListProperty EMPTY>
<!ATTLIST LinkListProperty Name      NMTOKEN       #REQUIRED
                           LinkType  IDREF         #REQUIRED
                           Override  (true|false)  #IMPLIED
                           Comment   CDATA         #IMPLIED
>

<!--

  XmlProperty
  ===========

  Grammar: Reference to the grammar element defining the DTD that XML content stored in this
           property will have to adhere to.
           All CAP components use parsers that expect a XML 1.0 compliant DTD.

	   One pre-defined grammar for XmlProperties is:
	     <XmlGrammar Name="coremedia-richtext-1.0"
			 Root="div"
			 SystemId="classpath:xml/coremedia-richtext-1.0.dtd"/>
-->
<!ELEMENT XmlProperty EMPTY>
<!ATTLIST XmlProperty Name      NMTOKEN       #REQUIRED
                      Grammar   IDREF         #REQUIRED
                      Override  (true|false)  #IMPLIED
                      Comment   CDATA         #IMPLIED
>

<!--

  SgmlTextProperty
  ================

  Note, that the use of SgmlTextProperty is deprecated in favor of XmlProperty.
  Since SgmlTextProperties do not explicitly define a Grammar, the following
  logic is used to determine one of several predefined Grammars.

  Query.Expression:
     <XmlGrammar Name="coremedia-query"
	         Root="QUERY"
	         SystemId="classpath:xml/coremedia-query.dtd"/>

  Preferences.Data:
    <XmlGrammar Name="coremedia-preferences"
	        Root="PREFERENCES"
	        SystemId="classpath:xml/coremedia-preferences.dtd"/>

  Dictionary.Data:
    <XmlGrammar Name="coremedia-dictionary"
   	        Root="dictionaries"
   	        SystemId="classpath:xml/coremedia-dictionary.dtd"/>

  All other properties:
    <XmlGrammar Name="coremedia-sgmltext"
	        Root="ROOT"
   	     SystemId="classpath:xml/coremedia-sgmltext.dtd"/>

-->
<!ELEMENT SgmlTextProperty EMPTY>
<!ATTLIST SgmlTextProperty Name NMTOKEN #REQUIRED>
